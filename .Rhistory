#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
#
# if(T){
N <- 200
Q <- 50
Q0 <- 3
zeta <-  - 1.8
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 3
zeta <-  - 1.8
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 3
zeta <-  -2.5
# }
#
# if(F){
# N <- 100
# P <- 20
# Q <- 10
# Q0 <- 1
# zeta <-  - 1.2
# }
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 3
zeta <-  -2
# }
#
# if(F){
# N <- 100
# P <- 20
# Q <- 10
# Q0 <- 1
# zeta <-  - 1.2
# }
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 3
zeta <-  -2.4
# }
#
# if(F){
# N <- 100
# P <- 20
# Q <- 10
# Q0 <- 1
# zeta <-  - 1.2
# }
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 1
zeta <-  -2
# }
#
# if(F){
# N <- 100
# P <- 20
# Q <- 10
# Q0 <- 1
# zeta <-  - 1.2
# }
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
# if(T){
N <- 200
P <- 100
Q <- 50
Q0 <- 1
zeta <-  -1.5
# }
#
# if(F){
# N <- 100
# P <- 20
# Q <- 10
# Q0 <- 1
# zeta <-  - 1.2
# }
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1.5
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1.3
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1.2
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
net$A
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1
#
V <- generate_V(P, Q)
#
beta0 <- 0.5
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
theta
hist(theta)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1
#
V <- generate_V(P, Q)
#
beta0 <- 0.7
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4) * 100
sum(upper.tri(net$A))
sum(net$A[upper.tri(net$A)])
net$A
sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A))
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1.5
#
V <- generate_V(P, Q)
#
beta0 <- 0.7
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4)
set.seed(123)
#
N <- 200
P <- 50
Q <- 10
Q0 <- 1
zeta <-  - 1.2
#
V <- generate_V(P, Q)
#
beta0 <- 0.7
sig2_beta0 <- 0.1
beta_true <- rlnorm(Q0, log(beta0), sig2_beta0)
beta_true_gmss <- rep(0, Q)
beta_true_gmss[sample(1:Q, Q0)] <- beta_true
#
theta <- V %*% matrix(beta_true_gmss, ncol = 1)
pe <- matrix(theta, nrow = P, ncol = P)
pe <- pe + t(pe) + zeta
pe <- pnorm(pe)
A <- 0 + (pe >= 0.5)
diag(A) <- 0
#
net <-  generate_data_from_adjancency(N = N, A = A)
round(sum(net$A[upper.tri(net$A)])/sum(upper.tri(net$A)),4)
devtools::build_rmd('vignettes/navigm.Rmd')
roxygen2::roxygenise('~/navigm/')
devtools::check()
?AIC_GSS
?generate_data_from_adjancency
seq(1e-4, 0.99, length.out = 10^4 + 1)
roxygen2::roxygenise('~/navigm/')
roxygen2::roxygenise('~/navigm/')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
?navigm
?navigm
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
roxygen2::roxygenise('~/navigm/')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
devtools::build_rmd('~/navigm/README.Rmd')
devtools::check('~/navigm/vignettes/navigm.Rmd')
devtools::check('~/navigm/')
roxygen2::roxygenise('~/navigm/')
devtools::check('~/navigm/')
plot
?plot
?plot
roxygen2::roxygenise('~/navigm/')
devtools::check('~/navigm/')
roxygen2::roxygenise('~/navigm/')
roxygen2::roxygenise('~/navigm/')
devtools::check('~/navigm/')
seed <- 123; set.seed(seed)
N <- 100; P <- 5; Q <- 3
V <- matrix(rnorm(P*Q), nrow = P, ncol = Q)
Y <- matrix(rnorm(N*P), nrow = N, ncol = P)
# estimate precision matrix based on Y and meanwhile leverage node-level variables V
ans <-navigm_core(Y, V)
AIC_GSS(ans$estimates,N)
# simulate data
seed <- 123; set.seed(seed)
N <- 100; P <- 5; Q <- 3
V <- matrix(rnorm(P*Q), nrow = P, ncol = Q)
Y <- matrix(rnorm(N*P), nrow = N, ncol = P)
# estimate precision matrix based on Y and meanwhile leverage node-level variables V
ans <-navigm_core(Y, V)
BIC_GSS(ans$estimates,N)
library(ROCR)
?performance
sample(c(0,1), 10)
set.seed(123); pat <- sample(c(0,1), 10, replace = T)
pat
#' This function plots an average receiver operating characteristic (ROC) curve with 95% confidence interval.
#' A partial ROC (pROC) curve can be specified with the argument \code{fpr_stop}.
#'
#' @param ppi A vector of continuous prediction scores, such as posterior inclusion probability, or a list containing such vectors.
#' @param pat A vector of binary true outcomes, or a list containing such vectors.
#' @param fpr_stop Scalar: false positive rate at which the ROC curve is truncated.
#' @param nci Number of confidence bars. The 95\% confidence interval is only displayed if \code{ppi} and \code{pat} are lists.
#' @param ... Other plotting arguments, such as \code{col} and \code{add}. For full details, please refer to \code{ROCR::plot}.
#'
#' @example
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(0,0.3)}else{runif(0.7,1)}})
ppat
pat
ppi
#' This function plots an average receiver operating characteristic (ROC) curve with 95% confidence interval.
#' A partial ROC (pROC) curve can be specified with the argument \code{fpr_stop}.
#'
#' @param ppi A vector of continuous prediction scores, such as posterior inclusion probability, or a list containing such vectors.
#' @param pat A vector of binary true outcomes, or a list containing such vectors.
#' @param fpr_stop Scalar: false positive rate at which the ROC curve is truncated.
#' @param nci Number of confidence bars. The 95\% confidence interval is only displayed if \code{ppi} and \code{pat} are lists.
#' @param ... Other plotting arguments, such as \code{col} and \code{add}. For full details, please refer to \code{ROCR::plot}.
#'
#' @example
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(1,0,0.3)}else{runif(1,0.7,1)}})
pat
ppi
#' This function plots an average receiver operating characteristic (ROC) curve with 95% confidence interval.
#' A partial ROC (pROC) curve can be specified with the argument \code{fpr_stop}.
#'
#' @param ppi A vector of continuous prediction scores, such as posterior inclusion probability, or a list containing such vectors.
#' @param pat A vector of binary true outcomes, or a list containing such vectors.
#' @param fpr_stop Scalar: false positive rate at which the ROC curve is truncated.
#' @param nci Number of confidence bars. The 95\% confidence interval is only displayed if \code{ppi} and \code{pat} are lists.
#' @param ... Other plotting arguments, such as \code{col} and \code{add}. For full details, please refer to \code{ROCR::plot}.
#'
#' @example
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(1,0,0.1)}else{runif(1,0.9,1)}})
plot_roc(ppi, pat)
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(1,0,0.1)}else{runif(1,0.9,1)}})
compute_pauc(ppi, pat)
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(1,0,0.1)}else{runif(1,0.9,1)}})
plot_ppi(ppi)
plot_ppi(ppi, ylab = 'inclusion probability')
set.seed(123); pat <- sample(c(0,1), 10, replace = T); ppi <- sapply(pat,function(x){if(x==0){runif(1,0,0.1)}else{runif(1,0.9,1)}})
compute_perf(ppi, pat)
set.seed(123); A <- matrix(0, 5, 5)
set.seed(123); A <- matrix(0, 5, 5)
A
A <- matrix(0, 5, 5); A[1,2] <- A[2,1] <- A[2,5] <- A[5,2] <- 1;
plot_network(A)
simulate_data_from_adjacency_matrix(N=10,A=A)
roxygen2::roxygenise('~/navigm/')
roxygen2::roxygenise('~/navigm/')
roxygen2::roxygenise('~/navigm/')
devtools::check('')
devtools::check('~/navigm/')
devtools::check('~/navigm/')
roxygen2::roxygenise('~/navigm/')
devtools::check('')
devtools::check('~/navigm/')
devtools::check('~/navigm/')
devtools::check('~/navigm/')
devtools::build_rmd('~/navigm/vignettes/navigm.Rmd')
devtools::build_rmd('~/navigm/README.Rmd')
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_rmd('~/navigm/README.Rmd')
devtools::build_rmd('~/navigm/README.Rmd')
devtools::check()
